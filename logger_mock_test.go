// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package freja

import (
	"sync"
)

var (
	lockLoggerMockDebug    sync.RWMutex
	lockLoggerMockDebugf   sync.RWMutex
	lockLoggerMockError    sync.RWMutex
	lockLoggerMockErrorf   sync.RWMutex
	lockLoggerMockFatal    sync.RWMutex
	lockLoggerMockFatalf   sync.RWMutex
	lockLoggerMockInfo     sync.RWMutex
	lockLoggerMockInfof    sync.RWMutex
	lockLoggerMockPanic    sync.RWMutex
	lockLoggerMockPanicf   sync.RWMutex
	lockLoggerMockPrint    sync.RWMutex
	lockLoggerMockPrintf   sync.RWMutex
	lockLoggerMockWarn     sync.RWMutex
	lockLoggerMockWarnf    sync.RWMutex
	lockLoggerMockWarning  sync.RWMutex
	lockLoggerMockWarningf sync.RWMutex
)

// Ensure, that LoggerMock does implement Logger.
// If this is not the case, regenerate this file with moq.
var _ Logger = &LoggerMock{}

// LoggerMock is a mock implementation of Logger.
//
//     func TestSomethingThatUsesLogger(t *testing.T) {
//
//         // make and configure a mocked Logger
//         mockedLogger := &LoggerMock{
//             DebugFunc: func(args ...interface{})  {
// 	               panic("mock out the Debug method")
//             },
//             DebugfFunc: func(format string, args ...interface{})  {
// 	               panic("mock out the Debugf method")
//             },
//             ErrorFunc: func(args ...interface{})  {
// 	               panic("mock out the Error method")
//             },
//             ErrorfFunc: func(format string, args ...interface{})  {
// 	               panic("mock out the Errorf method")
//             },
//             FatalFunc: func(args ...interface{})  {
// 	               panic("mock out the Fatal method")
//             },
//             FatalfFunc: func(format string, args ...interface{})  {
// 	               panic("mock out the Fatalf method")
//             },
//             InfoFunc: func(args ...interface{})  {
// 	               panic("mock out the Info method")
//             },
//             InfofFunc: func(format string, args ...interface{})  {
// 	               panic("mock out the Infof method")
//             },
//             PanicFunc: func(args ...interface{})  {
// 	               panic("mock out the Panic method")
//             },
//             PanicfFunc: func(format string, args ...interface{})  {
// 	               panic("mock out the Panicf method")
//             },
//             PrintFunc: func(args ...interface{})  {
// 	               panic("mock out the Print method")
//             },
//             PrintfFunc: func(format string, args ...interface{})  {
// 	               panic("mock out the Printf method")
//             },
//             WarnFunc: func(args ...interface{})  {
// 	               panic("mock out the Warn method")
//             },
//             WarnfFunc: func(format string, args ...interface{})  {
// 	               panic("mock out the Warnf method")
//             },
//             WarningFunc: func(args ...interface{})  {
// 	               panic("mock out the Warning method")
//             },
//             WarningfFunc: func(format string, args ...interface{})  {
// 	               panic("mock out the Warningf method")
//             },
//         }
//
//         // use mockedLogger in code that requires Logger
//         // and then make assertions.
//
//     }
type LoggerMock struct {
	// DebugFunc mocks the Debug method.
	DebugFunc func(args ...interface{})

	// DebugfFunc mocks the Debugf method.
	DebugfFunc func(format string, args ...interface{})

	// ErrorFunc mocks the Error method.
	ErrorFunc func(args ...interface{})

	// ErrorfFunc mocks the Errorf method.
	ErrorfFunc func(format string, args ...interface{})

	// FatalFunc mocks the Fatal method.
	FatalFunc func(args ...interface{})

	// FatalfFunc mocks the Fatalf method.
	FatalfFunc func(format string, args ...interface{})

	// InfoFunc mocks the Info method.
	InfoFunc func(args ...interface{})

	// InfofFunc mocks the Infof method.
	InfofFunc func(format string, args ...interface{})

	// PanicFunc mocks the Panic method.
	PanicFunc func(args ...interface{})

	// PanicfFunc mocks the Panicf method.
	PanicfFunc func(format string, args ...interface{})

	// PrintFunc mocks the Print method.
	PrintFunc func(args ...interface{})

	// PrintfFunc mocks the Printf method.
	PrintfFunc func(format string, args ...interface{})

	// WarnFunc mocks the Warn method.
	WarnFunc func(args ...interface{})

	// WarnfFunc mocks the Warnf method.
	WarnfFunc func(format string, args ...interface{})

	// WarningFunc mocks the Warning method.
	WarningFunc func(args ...interface{})

	// WarningfFunc mocks the Warningf method.
	WarningfFunc func(format string, args ...interface{})

	// calls tracks calls to the methods.
	calls struct {
		// Debug holds details about calls to the Debug method.
		Debug []struct {
			// Args is the args argument value.
			Args []interface{}
		}
		// Debugf holds details about calls to the Debugf method.
		Debugf []struct {
			// Format is the format argument value.
			Format string
			// Args is the args argument value.
			Args []interface{}
		}
		// Error holds details about calls to the Error method.
		Error []struct {
			// Args is the args argument value.
			Args []interface{}
		}
		// Errorf holds details about calls to the Errorf method.
		Errorf []struct {
			// Format is the format argument value.
			Format string
			// Args is the args argument value.
			Args []interface{}
		}
		// Fatal holds details about calls to the Fatal method.
		Fatal []struct {
			// Args is the args argument value.
			Args []interface{}
		}
		// Fatalf holds details about calls to the Fatalf method.
		Fatalf []struct {
			// Format is the format argument value.
			Format string
			// Args is the args argument value.
			Args []interface{}
		}
		// Info holds details about calls to the Info method.
		Info []struct {
			// Args is the args argument value.
			Args []interface{}
		}
		// Infof holds details about calls to the Infof method.
		Infof []struct {
			// Format is the format argument value.
			Format string
			// Args is the args argument value.
			Args []interface{}
		}
		// Panic holds details about calls to the Panic method.
		Panic []struct {
			// Args is the args argument value.
			Args []interface{}
		}
		// Panicf holds details about calls to the Panicf method.
		Panicf []struct {
			// Format is the format argument value.
			Format string
			// Args is the args argument value.
			Args []interface{}
		}
		// Print holds details about calls to the Print method.
		Print []struct {
			// Args is the args argument value.
			Args []interface{}
		}
		// Printf holds details about calls to the Printf method.
		Printf []struct {
			// Format is the format argument value.
			Format string
			// Args is the args argument value.
			Args []interface{}
		}
		// Warn holds details about calls to the Warn method.
		Warn []struct {
			// Args is the args argument value.
			Args []interface{}
		}
		// Warnf holds details about calls to the Warnf method.
		Warnf []struct {
			// Format is the format argument value.
			Format string
			// Args is the args argument value.
			Args []interface{}
		}
		// Warning holds details about calls to the Warning method.
		Warning []struct {
			// Args is the args argument value.
			Args []interface{}
		}
		// Warningf holds details about calls to the Warningf method.
		Warningf []struct {
			// Format is the format argument value.
			Format string
			// Args is the args argument value.
			Args []interface{}
		}
	}
}

// Debug calls DebugFunc.
func (mock *LoggerMock) Debug(args ...interface{}) {
	if mock.DebugFunc == nil {
		panic("LoggerMock.DebugFunc: method is nil but Logger.Debug was just called")
	}
	callInfo := struct {
		Args []interface{}
	}{
		Args: args,
	}
	lockLoggerMockDebug.Lock()
	mock.calls.Debug = append(mock.calls.Debug, callInfo)
	lockLoggerMockDebug.Unlock()
	mock.DebugFunc(args...)
}

// DebugCalls gets all the calls that were made to Debug.
// Check the length with:
//     len(mockedLogger.DebugCalls())
func (mock *LoggerMock) DebugCalls() []struct {
	Args []interface{}
} {
	var calls []struct {
		Args []interface{}
	}
	lockLoggerMockDebug.RLock()
	calls = mock.calls.Debug
	lockLoggerMockDebug.RUnlock()
	return calls
}

// Debugf calls DebugfFunc.
func (mock *LoggerMock) Debugf(format string, args ...interface{}) {
	if mock.DebugfFunc == nil {
		panic("LoggerMock.DebugfFunc: method is nil but Logger.Debugf was just called")
	}
	callInfo := struct {
		Format string
		Args   []interface{}
	}{
		Format: format,
		Args:   args,
	}
	lockLoggerMockDebugf.Lock()
	mock.calls.Debugf = append(mock.calls.Debugf, callInfo)
	lockLoggerMockDebugf.Unlock()
	mock.DebugfFunc(format, args...)
}

// DebugfCalls gets all the calls that were made to Debugf.
// Check the length with:
//     len(mockedLogger.DebugfCalls())
func (mock *LoggerMock) DebugfCalls() []struct {
	Format string
	Args   []interface{}
} {
	var calls []struct {
		Format string
		Args   []interface{}
	}
	lockLoggerMockDebugf.RLock()
	calls = mock.calls.Debugf
	lockLoggerMockDebugf.RUnlock()
	return calls
}

// Error calls ErrorFunc.
func (mock *LoggerMock) Error(args ...interface{}) {
	if mock.ErrorFunc == nil {
		panic("LoggerMock.ErrorFunc: method is nil but Logger.Error was just called")
	}
	callInfo := struct {
		Args []interface{}
	}{
		Args: args,
	}
	lockLoggerMockError.Lock()
	mock.calls.Error = append(mock.calls.Error, callInfo)
	lockLoggerMockError.Unlock()
	mock.ErrorFunc(args...)
}

// ErrorCalls gets all the calls that were made to Error.
// Check the length with:
//     len(mockedLogger.ErrorCalls())
func (mock *LoggerMock) ErrorCalls() []struct {
	Args []interface{}
} {
	var calls []struct {
		Args []interface{}
	}
	lockLoggerMockError.RLock()
	calls = mock.calls.Error
	lockLoggerMockError.RUnlock()
	return calls
}

// Errorf calls ErrorfFunc.
func (mock *LoggerMock) Errorf(format string, args ...interface{}) {
	if mock.ErrorfFunc == nil {
		panic("LoggerMock.ErrorfFunc: method is nil but Logger.Errorf was just called")
	}
	callInfo := struct {
		Format string
		Args   []interface{}
	}{
		Format: format,
		Args:   args,
	}
	lockLoggerMockErrorf.Lock()
	mock.calls.Errorf = append(mock.calls.Errorf, callInfo)
	lockLoggerMockErrorf.Unlock()
	mock.ErrorfFunc(format, args...)
}

// ErrorfCalls gets all the calls that were made to Errorf.
// Check the length with:
//     len(mockedLogger.ErrorfCalls())
func (mock *LoggerMock) ErrorfCalls() []struct {
	Format string
	Args   []interface{}
} {
	var calls []struct {
		Format string
		Args   []interface{}
	}
	lockLoggerMockErrorf.RLock()
	calls = mock.calls.Errorf
	lockLoggerMockErrorf.RUnlock()
	return calls
}

// Fatal calls FatalFunc.
func (mock *LoggerMock) Fatal(args ...interface{}) {
	if mock.FatalFunc == nil {
		panic("LoggerMock.FatalFunc: method is nil but Logger.Fatal was just called")
	}
	callInfo := struct {
		Args []interface{}
	}{
		Args: args,
	}
	lockLoggerMockFatal.Lock()
	mock.calls.Fatal = append(mock.calls.Fatal, callInfo)
	lockLoggerMockFatal.Unlock()
	mock.FatalFunc(args...)
}

// FatalCalls gets all the calls that were made to Fatal.
// Check the length with:
//     len(mockedLogger.FatalCalls())
func (mock *LoggerMock) FatalCalls() []struct {
	Args []interface{}
} {
	var calls []struct {
		Args []interface{}
	}
	lockLoggerMockFatal.RLock()
	calls = mock.calls.Fatal
	lockLoggerMockFatal.RUnlock()
	return calls
}

// Fatalf calls FatalfFunc.
func (mock *LoggerMock) Fatalf(format string, args ...interface{}) {
	if mock.FatalfFunc == nil {
		panic("LoggerMock.FatalfFunc: method is nil but Logger.Fatalf was just called")
	}
	callInfo := struct {
		Format string
		Args   []interface{}
	}{
		Format: format,
		Args:   args,
	}
	lockLoggerMockFatalf.Lock()
	mock.calls.Fatalf = append(mock.calls.Fatalf, callInfo)
	lockLoggerMockFatalf.Unlock()
	mock.FatalfFunc(format, args...)
}

// FatalfCalls gets all the calls that were made to Fatalf.
// Check the length with:
//     len(mockedLogger.FatalfCalls())
func (mock *LoggerMock) FatalfCalls() []struct {
	Format string
	Args   []interface{}
} {
	var calls []struct {
		Format string
		Args   []interface{}
	}
	lockLoggerMockFatalf.RLock()
	calls = mock.calls.Fatalf
	lockLoggerMockFatalf.RUnlock()
	return calls
}

// Info calls InfoFunc.
func (mock *LoggerMock) Info(args ...interface{}) {
	if mock.InfoFunc == nil {
		panic("LoggerMock.InfoFunc: method is nil but Logger.Info was just called")
	}
	callInfo := struct {
		Args []interface{}
	}{
		Args: args,
	}
	lockLoggerMockInfo.Lock()
	mock.calls.Info = append(mock.calls.Info, callInfo)
	lockLoggerMockInfo.Unlock()
	mock.InfoFunc(args...)
}

// InfoCalls gets all the calls that were made to Info.
// Check the length with:
//     len(mockedLogger.InfoCalls())
func (mock *LoggerMock) InfoCalls() []struct {
	Args []interface{}
} {
	var calls []struct {
		Args []interface{}
	}
	lockLoggerMockInfo.RLock()
	calls = mock.calls.Info
	lockLoggerMockInfo.RUnlock()
	return calls
}

// Infof calls InfofFunc.
func (mock *LoggerMock) Infof(format string, args ...interface{}) {
	if mock.InfofFunc == nil {
		panic("LoggerMock.InfofFunc: method is nil but Logger.Infof was just called")
	}
	callInfo := struct {
		Format string
		Args   []interface{}
	}{
		Format: format,
		Args:   args,
	}
	lockLoggerMockInfof.Lock()
	mock.calls.Infof = append(mock.calls.Infof, callInfo)
	lockLoggerMockInfof.Unlock()
	mock.InfofFunc(format, args...)
}

// InfofCalls gets all the calls that were made to Infof.
// Check the length with:
//     len(mockedLogger.InfofCalls())
func (mock *LoggerMock) InfofCalls() []struct {
	Format string
	Args   []interface{}
} {
	var calls []struct {
		Format string
		Args   []interface{}
	}
	lockLoggerMockInfof.RLock()
	calls = mock.calls.Infof
	lockLoggerMockInfof.RUnlock()
	return calls
}

// Panic calls PanicFunc.
func (mock *LoggerMock) Panic(args ...interface{}) {
	if mock.PanicFunc == nil {
		panic("LoggerMock.PanicFunc: method is nil but Logger.Panic was just called")
	}
	callInfo := struct {
		Args []interface{}
	}{
		Args: args,
	}
	lockLoggerMockPanic.Lock()
	mock.calls.Panic = append(mock.calls.Panic, callInfo)
	lockLoggerMockPanic.Unlock()
	mock.PanicFunc(args...)
}

// PanicCalls gets all the calls that were made to Panic.
// Check the length with:
//     len(mockedLogger.PanicCalls())
func (mock *LoggerMock) PanicCalls() []struct {
	Args []interface{}
} {
	var calls []struct {
		Args []interface{}
	}
	lockLoggerMockPanic.RLock()
	calls = mock.calls.Panic
	lockLoggerMockPanic.RUnlock()
	return calls
}

// Panicf calls PanicfFunc.
func (mock *LoggerMock) Panicf(format string, args ...interface{}) {
	if mock.PanicfFunc == nil {
		panic("LoggerMock.PanicfFunc: method is nil but Logger.Panicf was just called")
	}
	callInfo := struct {
		Format string
		Args   []interface{}
	}{
		Format: format,
		Args:   args,
	}
	lockLoggerMockPanicf.Lock()
	mock.calls.Panicf = append(mock.calls.Panicf, callInfo)
	lockLoggerMockPanicf.Unlock()
	mock.PanicfFunc(format, args...)
}

// PanicfCalls gets all the calls that were made to Panicf.
// Check the length with:
//     len(mockedLogger.PanicfCalls())
func (mock *LoggerMock) PanicfCalls() []struct {
	Format string
	Args   []interface{}
} {
	var calls []struct {
		Format string
		Args   []interface{}
	}
	lockLoggerMockPanicf.RLock()
	calls = mock.calls.Panicf
	lockLoggerMockPanicf.RUnlock()
	return calls
}

// Print calls PrintFunc.
func (mock *LoggerMock) Print(args ...interface{}) {
	if mock.PrintFunc == nil {
		panic("LoggerMock.PrintFunc: method is nil but Logger.Print was just called")
	}
	callInfo := struct {
		Args []interface{}
	}{
		Args: args,
	}
	lockLoggerMockPrint.Lock()
	mock.calls.Print = append(mock.calls.Print, callInfo)
	lockLoggerMockPrint.Unlock()
	mock.PrintFunc(args...)
}

// PrintCalls gets all the calls that were made to Print.
// Check the length with:
//     len(mockedLogger.PrintCalls())
func (mock *LoggerMock) PrintCalls() []struct {
	Args []interface{}
} {
	var calls []struct {
		Args []interface{}
	}
	lockLoggerMockPrint.RLock()
	calls = mock.calls.Print
	lockLoggerMockPrint.RUnlock()
	return calls
}

// Printf calls PrintfFunc.
func (mock *LoggerMock) Printf(format string, args ...interface{}) {
	if mock.PrintfFunc == nil {
		panic("LoggerMock.PrintfFunc: method is nil but Logger.Printf was just called")
	}
	callInfo := struct {
		Format string
		Args   []interface{}
	}{
		Format: format,
		Args:   args,
	}
	lockLoggerMockPrintf.Lock()
	mock.calls.Printf = append(mock.calls.Printf, callInfo)
	lockLoggerMockPrintf.Unlock()
	mock.PrintfFunc(format, args...)
}

// PrintfCalls gets all the calls that were made to Printf.
// Check the length with:
//     len(mockedLogger.PrintfCalls())
func (mock *LoggerMock) PrintfCalls() []struct {
	Format string
	Args   []interface{}
} {
	var calls []struct {
		Format string
		Args   []interface{}
	}
	lockLoggerMockPrintf.RLock()
	calls = mock.calls.Printf
	lockLoggerMockPrintf.RUnlock()
	return calls
}

// Warn calls WarnFunc.
func (mock *LoggerMock) Warn(args ...interface{}) {
	if mock.WarnFunc == nil {
		panic("LoggerMock.WarnFunc: method is nil but Logger.Warn was just called")
	}
	callInfo := struct {
		Args []interface{}
	}{
		Args: args,
	}
	lockLoggerMockWarn.Lock()
	mock.calls.Warn = append(mock.calls.Warn, callInfo)
	lockLoggerMockWarn.Unlock()
	mock.WarnFunc(args...)
}

// WarnCalls gets all the calls that were made to Warn.
// Check the length with:
//     len(mockedLogger.WarnCalls())
func (mock *LoggerMock) WarnCalls() []struct {
	Args []interface{}
} {
	var calls []struct {
		Args []interface{}
	}
	lockLoggerMockWarn.RLock()
	calls = mock.calls.Warn
	lockLoggerMockWarn.RUnlock()
	return calls
}

// Warnf calls WarnfFunc.
func (mock *LoggerMock) Warnf(format string, args ...interface{}) {
	if mock.WarnfFunc == nil {
		panic("LoggerMock.WarnfFunc: method is nil but Logger.Warnf was just called")
	}
	callInfo := struct {
		Format string
		Args   []interface{}
	}{
		Format: format,
		Args:   args,
	}
	lockLoggerMockWarnf.Lock()
	mock.calls.Warnf = append(mock.calls.Warnf, callInfo)
	lockLoggerMockWarnf.Unlock()
	mock.WarnfFunc(format, args...)
}

// WarnfCalls gets all the calls that were made to Warnf.
// Check the length with:
//     len(mockedLogger.WarnfCalls())
func (mock *LoggerMock) WarnfCalls() []struct {
	Format string
	Args   []interface{}
} {
	var calls []struct {
		Format string
		Args   []interface{}
	}
	lockLoggerMockWarnf.RLock()
	calls = mock.calls.Warnf
	lockLoggerMockWarnf.RUnlock()
	return calls
}

// Warning calls WarningFunc.
func (mock *LoggerMock) Warning(args ...interface{}) {
	if mock.WarningFunc == nil {
		panic("LoggerMock.WarningFunc: method is nil but Logger.Warning was just called")
	}
	callInfo := struct {
		Args []interface{}
	}{
		Args: args,
	}
	lockLoggerMockWarning.Lock()
	mock.calls.Warning = append(mock.calls.Warning, callInfo)
	lockLoggerMockWarning.Unlock()
	mock.WarningFunc(args...)
}

// WarningCalls gets all the calls that were made to Warning.
// Check the length with:
//     len(mockedLogger.WarningCalls())
func (mock *LoggerMock) WarningCalls() []struct {
	Args []interface{}
} {
	var calls []struct {
		Args []interface{}
	}
	lockLoggerMockWarning.RLock()
	calls = mock.calls.Warning
	lockLoggerMockWarning.RUnlock()
	return calls
}

// Warningf calls WarningfFunc.
func (mock *LoggerMock) Warningf(format string, args ...interface{}) {
	if mock.WarningfFunc == nil {
		panic("LoggerMock.WarningfFunc: method is nil but Logger.Warningf was just called")
	}
	callInfo := struct {
		Format string
		Args   []interface{}
	}{
		Format: format,
		Args:   args,
	}
	lockLoggerMockWarningf.Lock()
	mock.calls.Warningf = append(mock.calls.Warningf, callInfo)
	lockLoggerMockWarningf.Unlock()
	mock.WarningfFunc(format, args...)
}

// WarningfCalls gets all the calls that were made to Warningf.
// Check the length with:
//     len(mockedLogger.WarningfCalls())
func (mock *LoggerMock) WarningfCalls() []struct {
	Format string
	Args   []interface{}
} {
	var calls []struct {
		Format string
		Args   []interface{}
	}
	lockLoggerMockWarningf.RLock()
	calls = mock.calls.Warningf
	lockLoggerMockWarningf.RUnlock()
	return calls
}
