// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package freya

import (
	"context"
	"github.com/diego1q2w/freya/middleware"
	"sync"
)

var (
	lockMiddlewareMockInit sync.RWMutex
	lockMiddlewareMockRun  sync.RWMutex
	lockMiddlewareMockStop sync.RWMutex
)

// Ensure, that MiddlewareMock does implement middleware.Middleware.
// If this is not the case, regenerate this file with moq.
var _ middleware.Middleware = &MiddlewareMock{}

// MiddlewareMock is a mock implementation of middleware.Middleware.
//
//     func TestSomethingThatUsesMiddleware(t *testing.T) {
//
//         // make and configure a mocked middleware.Middleware
//         mockedMiddleware := &MiddlewareMock{
//             InitFunc: func() error {
// 	               panic("mock out the Init method")
//             },
//             RunFunc: func(ctx context.Context) error {
// 	               panic("mock out the Run method")
//             },
//             StopFunc: func(ctx context.Context) error {
// 	               panic("mock out the Stop method")
//             },
//         }
//
//         // use mockedMiddleware in code that requires middleware.Middleware
//         // and then make assertions.
//
//     }
type MiddlewareMock struct {
	// InitFunc mocks the Init method.
	InitFunc func() error

	// RunFunc mocks the Run method.
	RunFunc func(ctx context.Context) error

	// StopFunc mocks the Stop method.
	StopFunc func(ctx context.Context) error

	// calls tracks calls to the methods.
	calls struct {
		// Init holds details about calls to the Init method.
		Init []struct {
		}
		// Run holds details about calls to the Run method.
		Run []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// Stop holds details about calls to the Stop method.
		Stop []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
}

// Init calls InitFunc.
func (mock *MiddlewareMock) Init() error {
	if mock.InitFunc == nil {
		panic("MiddlewareMock.InitFunc: method is nil but Middleware.Init was just called")
	}
	callInfo := struct {
	}{}
	lockMiddlewareMockInit.Lock()
	mock.calls.Init = append(mock.calls.Init, callInfo)
	lockMiddlewareMockInit.Unlock()
	return mock.InitFunc()
}

// InitCalls gets all the calls that were made to Init.
// Check the length with:
//     len(mockedMiddleware.InitCalls())
func (mock *MiddlewareMock) InitCalls() []struct {
} {
	var calls []struct {
	}
	lockMiddlewareMockInit.RLock()
	calls = mock.calls.Init
	lockMiddlewareMockInit.RUnlock()
	return calls
}

// Run calls RunFunc.
func (mock *MiddlewareMock) Run(ctx context.Context) error {
	if mock.RunFunc == nil {
		panic("MiddlewareMock.RunFunc: method is nil but Middleware.Run was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	lockMiddlewareMockRun.Lock()
	mock.calls.Run = append(mock.calls.Run, callInfo)
	lockMiddlewareMockRun.Unlock()
	return mock.RunFunc(ctx)
}

// RunCalls gets all the calls that were made to Run.
// Check the length with:
//     len(mockedMiddleware.RunCalls())
func (mock *MiddlewareMock) RunCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	lockMiddlewareMockRun.RLock()
	calls = mock.calls.Run
	lockMiddlewareMockRun.RUnlock()
	return calls
}

// Stop calls StopFunc.
func (mock *MiddlewareMock) Stop(ctx context.Context) error {
	if mock.StopFunc == nil {
		panic("MiddlewareMock.StopFunc: method is nil but Middleware.Stop was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	lockMiddlewareMockStop.Lock()
	mock.calls.Stop = append(mock.calls.Stop, callInfo)
	lockMiddlewareMockStop.Unlock()
	return mock.StopFunc(ctx)
}

// StopCalls gets all the calls that were made to Stop.
// Check the length with:
//     len(mockedMiddleware.StopCalls())
func (mock *MiddlewareMock) StopCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	lockMiddlewareMockStop.RLock()
	calls = mock.calls.Stop
	lockMiddlewareMockStop.RUnlock()
	return calls
}
