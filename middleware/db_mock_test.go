// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package middleware

import (
	"context"
	"sync"
)

var (
	lockdbMockClose       sync.RWMutex
	lockdbMockPingContext sync.RWMutex
)

// Ensure, that dbMock does implement db.
// If this is not the case, regenerate this file with moq.
var _ db = &dbMock{}

// dbMock is a mock implementation of db.
//
//     func TestSomethingThatUsesdb(t *testing.T) {
//
//         // make and configure a mocked db
//         mockeddb := &dbMock{
//             CloseFunc: func() error {
// 	               panic("mock out the Close method")
//             },
//             PingContextFunc: func(in1 context.Context) error {
// 	               panic("mock out the PingContext method")
//             },
//         }
//
//         // use mockeddb in code that requires db
//         // and then make assertions.
//
//     }
type dbMock struct {
	// CloseFunc mocks the Close method.
	CloseFunc func() error

	// PingContextFunc mocks the PingContext method.
	PingContextFunc func(in1 context.Context) error

	// calls tracks calls to the methods.
	calls struct {
		// Close holds details about calls to the Close method.
		Close []struct {
		}
		// PingContext holds details about calls to the PingContext method.
		PingContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
		}
	}
}

// Close calls CloseFunc.
func (mock *dbMock) Close() error {
	if mock.CloseFunc == nil {
		panic("dbMock.CloseFunc: method is nil but db.Close was just called")
	}
	callInfo := struct {
	}{}
	lockdbMockClose.Lock()
	mock.calls.Close = append(mock.calls.Close, callInfo)
	lockdbMockClose.Unlock()
	return mock.CloseFunc()
}

// CloseCalls gets all the calls that were made to Close.
// Check the length with:
//     len(mockeddb.CloseCalls())
func (mock *dbMock) CloseCalls() []struct {
} {
	var calls []struct {
	}
	lockdbMockClose.RLock()
	calls = mock.calls.Close
	lockdbMockClose.RUnlock()
	return calls
}

// PingContext calls PingContextFunc.
func (mock *dbMock) PingContext(in1 context.Context) error {
	if mock.PingContextFunc == nil {
		panic("dbMock.PingContextFunc: method is nil but db.PingContext was just called")
	}
	callInfo := struct {
		In1 context.Context
	}{
		In1: in1,
	}
	lockdbMockPingContext.Lock()
	mock.calls.PingContext = append(mock.calls.PingContext, callInfo)
	lockdbMockPingContext.Unlock()
	return mock.PingContextFunc(in1)
}

// PingContextCalls gets all the calls that were made to PingContext.
// Check the length with:
//     len(mockeddb.PingContextCalls())
func (mock *dbMock) PingContextCalls() []struct {
	In1 context.Context
} {
	var calls []struct {
		In1 context.Context
	}
	lockdbMockPingContext.RLock()
	calls = mock.calls.PingContext
	lockdbMockPingContext.RUnlock()
	return calls
}
